/************************************************************************************
 *      Copyright (C) 2011 mesnac.com,All Rights Reserved
 *      File:
 *				BaseLottery.cs
 *      Description:
 *				 业务逻辑抽象基类
 *      Author:
 *				郑立兵
 *				zhenglb@mesnac.com
 *				http://www.mesnac.com
 *      Finish DateTime:
 *				2020年02月06日
 *      History:
 *      
 ***********************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

namespace Business
{
    using Data.Components;
    using Data;
    public abstract class BaseLottery<T> : IBaseLottery<T> where T : new()
    {
        private IBaseService<T> baseService;

        public IBaseService<T> BaseService
        {
            set { baseService = value; }
        }

        #region 封装数据访问层的常规数据访问方法
		/// <summary>
        /// Type类型向DBType类型转换
        /// </summary>
        /// <param name="t">Type类型</param>
        /// <returns>返回DBType</returns>
        public DbType TypeToDbType(Type t)
        {
            return this.baseService.TypeToDbType(t);
        }
        /// <summary>
        /// 按住键或标识列查找，只有是单字段主键（非组合键）时才按主键查找
        /// </summary>
        /// <param name="ida">对应查找记录的主键值或标识值</param>
        /// <returns>返回对应记录的实体信息</returns>
        public T GetById(int objId)
        {
            return this.baseService.GetById(objId);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public T GetById(Dictionary<string, object> ids)
        {
            return this.baseService.GetById(ids);
        }
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetListByWhere(Dictionary<string,object> where)
        {
            return this.baseService.GetListByWhere(where);
        }
		/// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetListByWhere(string where)
        {
            return this.baseService.GetListByWhere(where);
        }
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="entity">指定的实体属性作为条件</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetListByEntity(T entity)
        {
			return this.baseService.GetListByEntity(entity);
        }
        /// <summary>
        /// 指定条件和排序的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetListByWhereAndOrder(Dictionary<string, object> where, string order)
        {
            return this.baseService.GetListByWhereAndOrder(where, order);
        }
		/// <summary>
        /// 指定条件和排序的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetListByWhereAndOrder(string where, string order)
        {
            return this.baseService.GetListByWhereAndOrder(where, order);
        }
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回数据集</returns>
        public DataSet GetDataSetByWhere(Dictionary<string, object> where)
        {
            return this.baseService.GetDataSetByWhere(where);
        }
		/// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回数据集</returns>
        public DataSet GetDataSetByWhere(string where)
        {
            return this.baseService.GetDataSetByWhere(where);
        }
        /// <summary>
        /// 指定返回字段和参数的查询
        /// </summary>
        /// <param name="returnFields">查询结果中应包含的字段,*代表所有字段</param>
        /// <param name="parameters">查询参数列表，KeyValuePair的Key是字段名,KeyValuePair的Value是字段值</param>
        /// <returns>返回数据集</returns>
        public DataSet GetDataSetByFieldsAndParams(string returnFields, params KeyValuePair<string, object>[] parameters)
        {
            return this.baseService.GetDataSetByFieldsAndParams(returnFields, parameters);
        }
        /// <summary>
        /// 指定返回字段和参数的查询
        /// </summary>
        /// <param name="returnFields">查询结果中应包含的字段,*代表所有字段</param>
        /// <param name="parameters">查询参数列表</param>
        /// <returns>返回数据集</returns>
        public DataSet GetDataSetByFieldsAndParams(string returnFields, Dictionary<string, object> parameters)
        {
            return this.baseService.GetDataSetByFieldsAndParams(returnFields, parameters);
        }
        /// <summary>
        /// 查找表中所有记录
        /// </summary>
        /// <returns>返回对应表的实体类的集合</returns>
        public IList<T> GetAllList()
        {
            return this.baseService.GetAllList();
        }
        /// <summary>
        /// 查找表中的记录并排序
        /// </summary>
        /// <param name="order">排序字段</param>
        /// <returns>返回对应表的实体类的集合</returns>
        public IList<T> GetAllListOrder(string order)
        {
            return this.baseService.GetAllListOrder(order);
        }
        /// <summary>
        /// 返回指定排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的最大记录数</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetTopNListOrder(int n, string order)
        {
            return this.baseService.GetTopNListOrder(n, order);
        }
        /// <summary>
        /// 返回指定条件和排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的最大记录数</param>
        /// <param name="where">筛选条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetTopNListWhereOrder(int n, Dictionary<string, object> where, string order)
        {
            return this.baseService.GetTopNListWhereOrder(n, where, order);
        }
		/// <summary>
        /// 返回指定条件和排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的最大记录数</param>
        /// <param name="where">筛选条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        public IList<T> GetTopNListWhereOrder(int n, string where, string order)
        {
            return this.baseService.GetTopNListWhereOrder(n, where, order);
        }
        /// <summary>
        /// 查找表中所有记录
        /// </summary>
        /// <returns>返回对应的数据集</returns>
        public DataSet GetAllDataSet()
        {
            return this.baseService.GetAllDataSet();
        }
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="stmtId">SQL语句Id</param>
        /// <param name="values">查询条件</param>
        /// <returns>返回数据集</returns>
        public DataSet GetDataSetByStmt(string stmtId, params KeyValuePair<string,object>[] values)
        {
			return this.baseService.GetDataSetByStmt(stmtId, values);
        }
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        public PageResult<T> GetPageData(PageResult<T> pageResult)
        {
            return this.baseService.GetPageData(pageResult);
        }
        /// <summary>
        /// 获取某个属性（数据列）的最大值
        /// </summary>
        /// <param name="propertyItem">属性（数据列）</param>
        /// <returns>返回此属性（数据列）对应的最大值</returns>
        public object GetMaxValueByProperty(string propertyItem)
        {
            return this.baseService.GetMaxValueByProperty(propertyItem);
        }
		/// <summary>
        /// 调用基于SQL的存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象,dataSet,recordCount</returns>
        public PageResult<T> GetPageDataBySql(PageResult<T> pageResult)
        {
            return this.baseService.GetPageDataBySql(pageResult);
        }
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        public PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult)
        {
            return this.baseService.GetPageDataByReader(stmtId, pageResult);
        }
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        public PageResult<T> GetPageDataByReader(PageResult<T> pageResult)
        {
            return this.baseService.GetPageDataByReader(pageResult);
        }
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <param name="values">参数</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        public PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult, params KeyValuePair<string, object>[] values)
        {
			return this.baseService.GetPageDataByReader(stmtId, pageResult, values);
        }
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <param name="parameters">参数</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        public PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult, Dictionary<string, object>[] parameters)
        {
			return this.baseService.GetPageDataByReader(stmtId, pageResult, parameters);
        }
        /// <summary>
        /// 分页查询方法，基于分页存储过程
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总页数、总记录数的结果集的数据集</returns>
        public DataSet GetPageDataSet(PageResult<T> pageResult)
        {
            return this.baseService.GetPageDataSet(pageResult);
        }
        /// <summary>
        /// 执行存储过程的方法
        /// </summary>
        /// <param name="stmtId">存储过程的语句对象Id</param>
        /// <param name="values">存储过程的参数值</param>
        /// <returns>返回存储过程执行后对应的数据集</returns>
        public DataSet GetDataSetByStoreProcedure(string stmtId, params KeyValuePair<string, object>[] values)
        {
            return this.baseService.GetDataSetByStoreProcedure(stmtId, values);
        }
        /// <summary>
        /// 执行存储过程的方法
        /// </summary>
        /// <param name="stmtId">存储过程的语句对象Id</param>
        /// <param name="values">存储过程的参数</param>
        /// <returns>返回存储过程执行后对应的数据集</returns>
        public DataSet GetDataSetByStoreProcedure(string stmtId, Dictionary<string, object> values)
        {
            return this.baseService.GetDataSetByStoreProcedure(stmtId, values);
        }
        /// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="stmtId">SQL语句对象ID</param>
        /// <param name="values">参数</param>
        /// <returns>返回符合条件的记录数</returns>
        public int GetRowCount(string stmtId, params KeyValuePair<string, object>[] values)
        {
            return this.baseService.GetRowCount(stmtId, values);
        }
        /// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="values">参数</param>
        /// <returns>返回符合条件的记录数</returns>
        public int GetRowCount(params KeyValuePair<string, object>[] values)
        {
            return this.baseService.GetRowCount(values);
        }
		/// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="where">条件</param>
        /// <returns>返回符合条件的记录数</returns>
        public int GetRowCountByWhere(string where)
        {
            return this.baseService.GetRowCountByWhere(where);
        }
        /// <summary>
        /// 向表中追加一条记录
        /// </summary>
        /// <param name="entity">封装记录的实体</param>
        /// <returns>如果有自增列，则返回对应的自增列的值，否则返回受影响的行数</returns>
        public int Insert(T entity)
        {
            return this.baseService.Insert(entity);
        }
        /// <summary>
        /// 向表中批量追加记录
        /// </summary>
        /// <param name="lst">封装记录的List数组</param>
        /// <returns>返回受影响的行数</returns>
        public int BatchInsert(List<T> lst)
        {
            return this.baseService.BatchInsert(lst);
        }
        /// <summary>
        /// 更新表中的一条记录
        /// </summary>
        /// <param name="entity">封装记录的实体</param>
        /// <returns>返回受影响的行数</returns>
        public int Update(T entity)
        {
            return this.baseService.Update(entity);
        }
        /// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="stmtId">更新语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回更新的记录数</returns>
        public int UpdateByStmt(string stmtId, params KeyValuePair<string, object>[] values)
        {
            return this.baseService.UpdateByStmt(stmtId, values);
        }
        /// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="stmtId">更新语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回更新的记录数</returns>
        public int UpdateByStmt(string stmtId, Dictionary<string, object> values)
        {
            return this.baseService.UpdateByStmt(stmtId, values);
        }
		/// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="fieldSetValue">字段及更新的值，可以多个</param>
        /// <param name="where">条件表达式</param>
        /// <returns>返回更新的记录数</returns>
        public int UpdateFields(string fieldSetValue, string where)
        {
            return this.baseService.UpdateFields(fieldSetValue, where);
        }
        /// <summary>
        /// 删除表中的一条记录
        /// </summary>
        /// <param name="id">要删除记录的主键值和标识值</param>
        /// <returns>返回受影响的行数</returns>
        public int Delete(object id)
        {
            return this.baseService.Delete(id);
        }
        /// <summary>
        /// 删除对象对应的记录
        /// </summary>
        /// <param name="entity">与要删除记录对应的对象</param>
        public int Delete(T entity)
        {
            return this.baseService.Delete(entity);
        }
        /// <summary>
        /// 按指定的条件删除数据
        /// </summary>
        /// <param name="stmtId">删除语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回删除的记录数</returns>
        public int DeleteByStmt(string stmtId, KeyValuePair<string, object>[] values)
        {
            return this.baseService.DeleteByStmt(stmtId, values);
        }
        /// <summary>
        /// 按指定的条件删除数据
        /// </summary>
        /// <param name="stmtId">删除语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回删除的记录数</returns>
        public int DeleteByStmt(string stmtId, Dictionary<string, object> values)
        {
            return this.baseService.DeleteByStmt(stmtId, values);
        }
		/// <summary>
        /// 删除指定条件的记录
        /// </summary>
        /// <param name="where">条件</param>
        /// <returns>返回删除的记录数</returns>
        public int DeleteByWhere(string where)
        {
            return this.baseService.DeleteByWhere(where);
        }
        /// <summary>
        /// 清空表中的数据
        /// </summary>
        /// <returns>返回清除的记录数</returns>
        public void ClearData()
        {
            this.baseService.ClearData();
        }
        #endregion
    }
}

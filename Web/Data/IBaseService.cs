/************************************************************************************
 *      Copyright (C) 2011 mesnac.com,All Rights Reserved
 *      File:
 *				IBaseService.cs
 *      Description:
 *				 数据访问基础接口
 *      Author:
 *				郑立兵
 *				zhenglb@mesnac.com
 *				http://www.mesnac.com
 *      Finish DateTime:
 *				2020年02月06日
 *      History:
 ***********************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

namespace Data
{
    using Data.Components;
    public interface IBaseService<T> where T : new()
    {
        /// <summary>
        /// Type类型向DBType类型转换
        /// </summary>
        /// <param name="t">Type类型</param>
        /// <returns>返回DBType</returns>
        DbType TypeToDbType(Type t);
        /// <summary>
        /// 按照主键查找
        /// </summary>
        /// <param name="ids">主键参数列表</param>
        /// <returns>返回主键对应的对象</returns>
        T GetById(int objId);
        /// <summary>
        /// 按照主键查找
        /// </summary>
        /// <param name="ids">主键参数列表</param>
        /// <returns>返回主键对象的对象</returns>
        T GetById(Dictionary<string, object> ids);
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetListByWhere(Dictionary<string,object> where);
		/// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetListByWhere(string where);
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="entity">指定的实体属性作为条件</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetListByEntity(T entity);
        /// <summary>
        /// 指定条件和排序的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetListByWhereAndOrder(Dictionary<string, object> where, string order);
		/// <summary>
        /// 指定条件和排序的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetListByWhereAndOrder(string where, string order);
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回数据集</returns>
        DataSet GetDataSetByWhere(Dictionary<string, object> where);
		/// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>返回数据集</returns>
        DataSet GetDataSetByWhere(string where);
        /// <summary>
        /// 指定返回字段和阐述的查询
        /// </summary>
        /// <param name="returnFields">查询结果中应包含的字段,*代表所有字段</param>
        /// <param name="parameters">查询条件</param>
        /// <returns>返回符合查询条件指定字段列表的结果集</returns>
        DataSet GetDataSetByFieldsAndParams(string returnFields, params KeyValuePair<string, object>[] parameters);
        /// <summary>
        /// 指定返回字段和参数的查询
        /// </summary>
        /// <param name="returnFields">查询结果中应包含的字段,*代表所有字段</param>
        /// <param name="parameters">查询参数列表</param>
        /// <returns>返回数据集</returns>
        DataSet GetDataSetByFieldsAndParams(string returnFields, Dictionary<string, object> parameters);
        /// <summary>
        /// 查询所有记录并以List形式返回
        /// </summary>
        /// <returns></returns>
        IList<T> GetAllList();
        /// <summary>
        /// 查找表中的记录并排序
        /// </summary>
        /// <param name="order">排序字段</param>
        /// <returns>返回对应表的实体类的集合</returns>
        IList<T> GetAllListOrder(string order);
        /// <summary>
        /// 返回指定排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的记录数</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetTopNListOrder(int n, string order);
        /// <summary>
        /// 返回指定条件和排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的最大记录数</param>
        /// <param name="where">筛选条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetTopNListWhereOrder(int n, Dictionary<string, object> where, string order);
		/// <summary>
        /// 返回指定条件和排序的前N条记录
        /// </summary>
        /// <param name="n">返回结果中的最大记录数</param>
        /// <param name="where">筛选条件</param>
        /// <param name="order">排序字段</param>
        /// <returns>返回实体类的集合</returns>
        IList<T> GetTopNListWhereOrder(int n, string where, string order);
        /// <summary>
        /// 查询所有记录并以DataSet方式返回数据
        /// </summary>
        /// <returns></returns>
        DataSet GetAllDataSet();
        /// <summary>
        /// 指定条件的查询
        /// </summary>
        /// <param name="stmtId">SQL语句Id</param>
        /// <param name="values">查询条件</param>
        /// <returns>返回数据集</returns>
        DataSet GetDataSetByStmt(string stmtId, params KeyValuePair<string,object>[] values);
        /// <summary>
        /// 获取某个属性（数据列）的最大值
        /// </summary>
        /// <param name="propertyItem">属性（数据列）</param>
        /// <returns>返回此属性（数据列）对应的最大值</returns>
        object GetMaxValueByProperty(string propertyItem);
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        PageResult<T> GetPageData(PageResult<T> pageResult);
		/// <summary>
        /// 调用基于SQL的存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象,dataSet,recordCount</returns>
        PageResult<T> GetPageDataBySql(PageResult<T> pageResult);
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult);
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        PageResult<T> GetPageDataByReader(PageResult<T> pageResult);
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <param name="values">参数</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult, params KeyValuePair<string, object>[] values);
        /// <summary>
        /// 调用存储过程的分页查询方法
        /// </summary>
        /// <param name="stmtId">SQL语句对象Id</param>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <param name="parameters">参数</param>
        /// <returns>返回封装了页面数据和总记录数据的分页类对象</returns>
        PageResult<T> GetPageDataByReader(string stmtId, PageResult<T> pageResult, Dictionary<string, object>[] parameters);
        /// <summary>
        /// 分页查询方法，基于分页存储过程
        /// </summary>
        /// <param name="pageResult">用于传递查询条件的分页类的对象</param>
        /// <returns>返回封装了页面数据和总页数、总记录数的结果集的数据集</returns>
        DataSet GetPageDataSet(PageResult<T> pageResult);
        /// <summary>
        /// 执行存储过程的方法
        /// </summary>
        /// <param name="stmtId">存储过程的语句对象Id</param>
        /// <param name="values">存储过程的参数值</param>
        /// <returns>返回存储过程执行后对应的数据集</returns>
        DataSet GetDataSetByStoreProcedure(string stmtId, params KeyValuePair<string, object>[] values);
        /// <summary>
        /// 执行存储过程的方法
        /// </summary>
        /// <param name="stmtId">存储过程的语句对象Id</param>
        /// <param name="values">存储过程的参数</param>
        /// <returns>返回存储过程执行后对应的数据集</returns>
        DataSet GetDataSetByStoreProcedure(string stmtId, Dictionary<string, object> values);
        /// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="stmtId">SQL语句对象ID</param>
        /// <param name="values">参数</param>
        /// <returns>返回符合条件的记录数</returns>
        int GetRowCount(string stmtId, params KeyValuePair<string, object>[] values);
        /// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="values">参数</param>
        /// <returns>返回符合条件的记录数</returns>
        int GetRowCount(params KeyValuePair<string, object>[] values);
		/// <summary>
        /// 获取符合条件的记录数
        /// </summary>
        /// <param name="where">条件</param>
        /// <returns>返回符合条件的记录数</returns>
        int GetRowCountByWhere(string where);
        /// <summary>
        /// 添加新记录
        /// </summary>
        /// <param name="entity">对应新记录的实体数据</param>
        /// <returns>返回追加记录的主键值</returns>
        int Insert(T entity);
        /// <summary>
        /// 批量添加新纪录
        /// </summary>
        /// <param name="lst">对应的List记录</param>
        /// <returns>返回受影响的记录行数</returns>
        int BatchInsert(List<T> lst);
        /// <summary>
        /// 更新记录
        /// </summary>
        /// <param name="entity">需要更新记录对应的实体数据</param>
        /// <returns>返回更新的记录数</returns>
        int Update(T entity);
        /// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="stmtId">更新语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回更新的记录数</returns>
        int UpdateByStmt(string stmtId, params KeyValuePair<string, object>[] values);
        /// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="stmtId">更新语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回更新的记录数</returns>
        int UpdateByStmt(string stmtId, Dictionary<string, object> values);
		/// <summary>
        /// 按条件更新
        /// </summary>
        /// <param name="fieldSetValue">字段及更新的值，可以多个</param>
        /// <param name="where">条件表达式</param>
        /// <returns>返回更新的记录数</returns>
        int UpdateFields(string fieldSetValue, string where);
        /// <summary>
        /// 删除主键是id值得记录
        /// </summary>
        /// <param name="id">要删除记录的主键值</param>
        /// <returns>返回删除的记录条数</returns>
        int Delete(object id);
        /// <summary>
        /// 删除对象对应的记录
        /// </summary>
        /// <param name="entity">与要删除记录对应的对象</param>
        int Delete(T entity);
        /// <summary>
        /// 按指定的条件删除数据
        /// </summary>
        /// <param name="stmtId">删除语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回删除的记录数</returns>
        int DeleteByStmt(string stmtId, params KeyValuePair<string, object>[] values);
        /// <summary>
        /// 按指定的条件删除数据
        /// </summary>
        /// <param name="stmtId">删除语句对象Id</param>
        /// <param name="values">参数</param>
        /// <returns>返回删除的记录数</returns>
        int DeleteByStmt(string stmtId, Dictionary<string, object> values);
		/// <summary>
        /// 删除指定条件的记录
        /// </summary>
        /// <param name="where">条件</param>
        /// <returns>返回删除的记录数</returns>
        int DeleteByWhere(string where);
        /// <summary>
        /// 清除表中所有记录
        /// </summary>
        void ClearData();
    }
}
